{"version":3,"sources":["project/complexTask/text/index.ts"],"names":["Object","defineProperty","__webpack_exports__","value","htmlText","readMeText","javaScriptText","title","text"],"mappings":"qDAAAA,OAAAC,eAAAC,EAAA,cAAAC,OAAA,IAgZeD,EAAA,SAAEE,SAnYA,ytFAmYUC,WA/YzB,s4CA+YqCC,iBAnVnCC,MAAO,2BAAQC,KAAM,+4DAyErBD,MAAO,QACPC,KAAM,0zCAwBND,MAAO,uBACPC,KAAK","file":"static/js/49.ed5c58fe.chunk.js","sourcesContent":["const readMeText =\r\n  `  本例需要进行的流程如下：<br/>\r\n  1、 请求接口，通过合并订单号查询出合并订单下的所有子单数据<br/>\r\n  2、 过滤掉下不需要打印的子单<br/>\r\n  3、 请求接口，查询每个子单对应的各自打印模板<br/>\r\n  4、 请求接口，请求接口变更每个子单的打印状态<br/>\r\n  5、 拆分打印任务，根据每个子单的打印规则（一订单一个打印任务或者按数量拆分成n个打印任务）<br/>\r\n  6、 请求硬件接口，送入打印并显示进度 （这个接口应该为与硬件连接的接口而不是后端的）<br/>\r\n  7、 请求日志接口，上报打印结果<br/>\r\n  （注意：实际项目中应该补上对错误情况的处理，本例留白）<br/>\r\n`;\r\n\r\n\r\nconst htmlText = `render() {\r\n  const successNum = this.state.flow.tasks.filter(item => item.status === 'success').length\r\n  return (\r\n    <div>\r\n      <Button type=\"primary\" icon=\"caret-right\" onClick={this.executeTask} disabled={!this.state.taskReady}>执行任务</Button>\r\n      <Modal visible={this.state.visible} maskClosable={false} footer={null} width={800} closable={false}>\r\n        <div className={style.modalContainer} data-flex='dir:top main:center cross:center'>\r\n          {/* 标题 */}\r\n          {successNum === 7 ?\r\n            <p className={\\`\\${style.modalTitle}  \\${style.green}\\`} data-flex='cross:center'>  <Icon type=\"check-circle\" /> 任务已完成 </p>\r\n            : <p className={\\`\\${style.modalTitle} && \\${style.blue}\\`} data-flex='cross:center'>  <Icon type=\"loading\" /> 任务进行中 </p>\r\n          }\r\n          {/* 说明 */}\r\n          <p data-flex='main:start cross:center' style={{ width: '100%' }} className={style.explain}>\r\n            当前任务共 <span className={style.blue}>7</span>项流程，当前正在进行第 <span className={style.green}>{successNum}</span>项\r\n          </p>\r\n          {/* 进度条 */}\r\n          <Progress percent={Math.ceil((successNum / 7) * 100)} strokeWidth={20} status={successNum === 7 ? \"success\" : \"active\"} strokeColor={successNum === 7 ? '#67C23A' : '#1890ff'} />\r\n          {/* 任务详情盒子 */}\r\n          <div className={style.detailBox}>\r\n            {this.state.flow.tasks.map(item => {\r\n              return (<div key={item.text}>\r\n                {item.status === 'waitting' ? <p className={style.gray} data-flex='main:justify cross:center'>\r\n                  <span>{item.text}</span>\r\n                  <span>等待中</span>\r\n                </p> : null}\r\n                {item.status === 'doing' ? <p className={style.blue} data-flex='main:justify cross:center'>\r\n                  <span>{item.text}</span>\r\n                  <span><Icon type=\"loading\" />进行中</span>\r\n                </p> : null}\r\n                {item.status === 'success' ? <p className={style.green} data-flex='main:justify cross:center'>\r\n                  <span>{item.text}</span>\r\n                  <span><Icon type=\"check\" />已完成</span>\r\n                </p> : null}\r\n              </div>)\r\n            })}\r\n          </div>\r\n          {/* 按钮 */}\r\n          <div className={style.btnConatiner} data-flex='dir:left main:right cross:center'>\r\n            <Button type=\"primary\" onClick={this.handleConfirm} disabled={successNum !== 7}>确认</Button>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );`;\r\n\r\nconst javaScriptText = [\r\n  {\r\n    title: \"接口模拟\", text: `// service.ts\r\n// 通过合并订单号（如：CMB-0015151616）查询子单\r\n\r\nexport function fetchOrderInfo(params: { ordernum: string }) {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve({\r\n        code: 200,\r\n        data: [\r\n          { ordernum: '350001', title: '示例任务A', num: 5, mode: 0 },\r\n          { ordernum: '350002', title: '示例任务B', num: 3, mode: 1 },\r\n          { ordernum: '350003', title: '示例任务C', num: 4, mode: 2 },\r\n        ]\r\n      })\r\n    }, 1000)\r\n  })\r\n}\r\n\r\n// 通过子订单号查询其他配套数据\r\n\r\nexport function fetchTemplate(params: { ordernum: string }) {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve({\r\n        code: 200,\r\n        data: {\r\n          ordernum: params.ordernum,\r\n          template: '\\br <示例模板/>'\r\n        }\r\n      })\r\n    }, 1000)\r\n  })\r\n}\r\n\r\n// 请求接口变更子单的打印状态\r\n\r\nexport function changePrintStatus(params: { ordernum: string }) {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve({\r\n        code: 200,\r\n        msg: 'success'\r\n      })\r\n    }, 1000)\r\n  })\r\n}\r\n\r\n// 请求接口上报操作日志\r\n\r\nexport function uploadLog(params: { ordernum: string, status: string }) {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve({\r\n        code: 200,\r\n        msg: 'success'\r\n      })\r\n    }, 1000)\r\n  })\r\n}\r\n\r\n// 模拟请求打印机发起打印\r\n\r\nexport function printTicket(params: { ordernum: string, tempalte: string }) {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve({\r\n        code: 200,\r\n        msg: 'success'\r\n      })\r\n    }, 1000)\r\n  })\r\n}\r\n  `}, {\r\n    title: 'State',\r\n    text: `constructor(props) {\r\n      super(props);\r\n      this.executeTask = this.executeTask.bind(this)\r\n      this.assembleTask = this.assembleTask.bind(this)\r\n      this.handleConfirm = this.handleConfirm.bind(this)\r\n      this.state = {\r\n        combineOrdernum: 'CMB-0071516106',\r\n        visible: false,\r\n        taskReady: true,\r\n        flow: {\r\n          title: '查询合并订单号下的订单信息',\r\n          tasks: [\r\n            { text: '查询合并订单号：CMB-0071516106', status: 'waitting' },\r\n            { text: '过滤无需打印的任务', status: 'waitting' },\r\n            { text: '查询每个子单对应的各自打印模板', status: 'waitting' },\r\n            { text: '请求变更每个子单的打印状态', status: 'waitting' },\r\n            { text: '根据子单票数拆分出打印任务的数量', status: 'waitting' },\r\n            { text: '请求硬件设备进行单票打印', status: 'waitting' },\r\n            { text: '上报本次任务日志', status: 'waitting' },\r\n          ]\r\n        }\r\n      };\r\n    }`\r\n  }, {\r\n    title: 'Rx任务流',\r\n    text:`     \r\n    // 执行任务\r\n    executeTask() {\r\n      this.setState({ taskReady: false })\r\n      this.assembleTask().then(data => {\r\n        this.setState({ taskReady: true })\r\n        // tslint:disable-next-line:no-console\r\n        console.log(data)\r\n      }).catch(err => {\r\n        this.setState({ taskReady: false })\r\n        // tslint:disable-next-line:no-console\r\n        console.log(err)\r\n      })\r\n    }\r\n\r\n    // 组装任务\r\n    assembleTask() {\r\n      let successTaskList = [];\r\n      let failTaskList = [];\r\n      this.setState({ visible: true })\r\n      return new Promise((resolve, reject) => {\r\n        of(this.state.combineOrdernum)\r\n          .pipe(\r\n  \r\n            // 1. 请求接口，通过合并订单号查询出合并订单下的所有子单数据\r\n  \r\n            tap(() => {\r\n              let tasks = this.state.flow.tasks;\r\n              tasks[0].status = 'doing'\r\n              this.setState({ flow: { ...this.state.flow, tasks } })\r\n            }),\r\n  \r\n            switchMapTo(fetchOrderInfo({ ordernum: this.state.combineOrdernum })),\r\n  \r\n            switchMap(res => {\r\n  \r\n              if (res.code === 200) {\r\n                const tickets = res.data\r\n                if (res.data.length === 0) {\r\n                  throw new Error('服务器没有返回门票打印信息')\r\n                } else {\r\n                  return from(tickets)\r\n                }\r\n              } else {\r\n                throw new Error(res.msg || '查询门票打印信息失败')\r\n              }\r\n            }),\r\n  \r\n            tap(() => {\r\n              let tasks = this.state.flow.tasks;\r\n              tasks[0].status = 'success'\r\n              this.setState({ flow: { ...this.state.flow, tasks } })\r\n            }),\r\n  \r\n            // 2.过滤掉下不需要打印的子单(mode === 0)\r\n  \r\n            tap(() => {\r\n              let tasks = this.state.flow.tasks;\r\n              tasks[1].status = 'doing'\r\n              this.setState({ flow: { ...this.state.flow, tasks } })\r\n            }),\r\n  \r\n            filter(ticket => {\r\n              if (ticket.mode === 0) {\r\n                failTaskList.push({ ticket: ticket, failText: \"无需打印\" })\r\n                return false\r\n              } else {\r\n                return true\r\n              }\r\n            }),\r\n  \r\n            tap(() => {\r\n              let tasks = this.state.flow.tasks;\r\n              tasks[1].status = 'success'\r\n              this.setState({ flow: { ...this.state.flow, tasks } })\r\n            }),\r\n  \r\n            // 3.请求接口，查询每个子单对应的各自打印模板\r\n  \r\n            tap(() => {\r\n              let tasks = this.state.flow.tasks;\r\n              tasks[2].status = 'doing'\r\n              this.setState({ flow: { ...this.state.flow, tasks } })\r\n            }),\r\n  \r\n            mergeMap(ticket =>\r\n              of(ticket).pipe(\r\n                switchMapTo(fetchTemplate({ ordernum: ticket.ordernum })),\r\n                filter(res => {\r\n                  if (!res.code || res.code !== 200) {\r\n                    failTaskList.push({ ticket: ticket, failText: \\`查询打印模板失败：\\${res.msg || res}\\` })\r\n                    return false\r\n                  } else {\r\n                    return true\r\n                  }\r\n                }),\r\n                map(res => {\r\n                  return { ticket: ticket, template: res.data.template }\r\n                })\r\n              )\r\n            ),\r\n  \r\n            tap(() => {\r\n              let tasks = this.state.flow.tasks;\r\n              tasks[2].status = 'success'\r\n              this.setState({ flow: { ...this.state.flow, tasks } })\r\n            }),\r\n  \r\n            // 4.请求接口，请求接口变更每个子单的打印状态\r\n  \r\n            tap(() => {\r\n              let tasks = this.state.flow.tasks;\r\n              tasks[3].status = 'doing'\r\n              this.setState({ flow: { ...this.state.flow, tasks } })\r\n            }),\r\n  \r\n            mergeMap(({ ticket, template }) => {\r\n              return of({ ticket, template })\r\n                .pipe(\r\n                  switchMapTo(changePrintStatus({ ordernum: ticket.ordernum })),\r\n                  filter(res => {\r\n                    if (!res.code || res.code !== 200) {\r\n                      failTaskList.push({ ticket: ticket, failText: \\`修改门票打印状态失败：\\${res.msg || res}\\` })\r\n                      return false\r\n                    } else {\r\n                      return true\r\n                    }\r\n                  }),\r\n                  map(res => { return { ticket, template } })\r\n                )\r\n            }),\r\n  \r\n            tap(() => {\r\n              let tasks = this.state.flow.tasks;\r\n              tasks[3].status = 'success'\r\n              this.setState({ flow: { ...this.state.flow, tasks } })\r\n            }),\r\n  \r\n            // 5.根据子单票数拆分出打印任务的数量\r\n  \r\n            tap(() => {\r\n              let tasks = this.state.flow.tasks;\r\n              tasks[4].status = 'doing'\r\n              this.setState({ flow: { ...this.state.flow, tasks } })\r\n            }),\r\n  \r\n            exhaustMap(({ ticket, template }) => {\r\n              if (ticket.mode === 2) {\r\n                let patchTickets = new Array(ticket.num).fill(null).map(() => {\r\n                  return { ticket: Object(ticket, { num: 1 }), template: template }\r\n                })\r\n                return from(patchTickets)\r\n              } else if (ticket.mode === 1) {\r\n                return of({ ticket, template })\r\n              }\r\n            }),\r\n  \r\n            tap(() => {\r\n              let tasks = this.state.flow.tasks;\r\n              tasks[4].status = 'success'\r\n              this.setState({ flow: { ...this.state.flow, tasks } })\r\n            }),\r\n  \r\n            // 6.请求硬件设备进行单票打印\r\n  \r\n            tap(() => {\r\n              let tasks = this.state.flow.tasks;\r\n              tasks[5].status = 'doing'\r\n              this.setState({ flow: { ...this.state.flow, tasks } })\r\n            }),\r\n  \r\n            mergeMap(({ ticket, template }) => {\r\n              return of({ ticket, template })\r\n                .pipe(\r\n                  switchMapTo(printTicket({ ordernum: ticket.ordernum, template })),\r\n                  filter(res => {\r\n                    if (!res.code || res.code !== 200) {\r\n                      failTaskList.push({ ticket: ticket, failText: \\`打印机打印失败：\\${res.msg || res}\\` })\r\n                      return false\r\n                    } else {\r\n                      return true\r\n                    }\r\n                  }),\r\n                  map(res => { return { ticket, template } })\r\n                )\r\n            }),\r\n  \r\n            tap(() => {\r\n              let tasks = this.state.flow.tasks;\r\n              tasks[5].status = 'success'\r\n              this.setState({ flow: { ...this.state.flow, tasks } })\r\n            }),\r\n  \r\n            // 7.上报日志\r\n  \r\n            tap(() => {\r\n              let tasks = this.state.flow.tasks;\r\n              tasks[6].status = 'doing'\r\n              this.setState({ flow: { ...this.state.flow, tasks } })\r\n            }),\r\n  \r\n            mergeMap(({ ticket, template }) => {\r\n              return of({ ticket, template })\r\n                .pipe(\r\n                  switchMapTo(uploadLog({ ordernum: ticket.ordernum, status: '任务完成' })),\r\n                  filter(res => {\r\n                    if (!res.code || res.code !== 200) {\r\n                      failTaskList.push({ ticket: ticket, failText: \\`上报失败：\\${res.msg || res}\\` })\r\n                      return false\r\n                    } else {\r\n                      return true\r\n                    }\r\n                  }),\r\n                  map(res => { return { ticket, template } })\r\n                )\r\n            }),\r\n  \r\n            tap(() => {\r\n              let tasks = this.state.flow.tasks;\r\n              tasks[6].status = 'success'\r\n              this.setState({ flow: { ...this.state.flow, tasks } })\r\n            }),\r\n  \r\n            catchError(err => reject(err))\r\n          )\r\n          .subscribe({\r\n            next(successTask) {\r\n              successTaskList.push(successTask)\r\n            },\r\n            complete() {\r\n              resolve({ successTaskList, failTaskList })\r\n            }\r\n          })\r\n      })\r\n    }\r\n    \r\n    `\r\n  }\r\n];\r\n\r\nexport default { htmlText, readMeText, javaScriptText };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/project/complexTask/text/index.ts"],"sourceRoot":""}