{"version":3,"sources":["project/privateVariable/text/index.ts"],"names":["Object","defineProperty","__webpack_exports__","value","javaScriptText","title","text"],"mappings":"oDAAAA,OAAAC,eAAAC,EAAA,cAAAC,OAAA,IAsLeD,EAAA,SAAEE,iBApLbC,MAAO,2BACPC,KAAM,8iBAoBND,MAAO,UAEPC,KAAM,uzBA4BND,MAAO,SACPC,KAAM,kgCAsBND,MAAO,eACPC,KAAM,2yBA2BND,MAAO,QACPC,KAAM,q9DAoDJD,MAAM,eACNC,KAAK","file":"static/js/26.7dee1f9f.chunk.js","sourcesContent":["const javaScriptText = [\r\n  {\r\n    title: \"命名约定\",\r\n    text: `//使用特定的命名约定来表示属性应该被视为私有\r\n//外部没有实际上限制访问的措施\r\n\r\nclass Shape{\r\n  constructor(width, height) {\r\n    this._width = width;\r\n    this._height = height;\r\n  }\r\n  get area() {\r\n    return this._width * this._height;\r\n  }\r\n}\r\n\r\nconst square = new Shape(10, 10);\r\n\r\nconsole.log(square); // Shape {_width:10,_height:10}\r\nconsole.log(JSON.stringify(square)) // {\"_width\":10,\"_height\":10}\r\n    `\r\n  },\r\n  {\r\n    title: \"WeakMap\",\r\n\r\n    text: `//使用 WeakMap 来存储所有私有值\r\n//可以起到限制私有属性访问的作用，但它依赖于一个放在类外面的可以访问和操作的 WeakMap 变量\r\n\r\nconst map = new WeakMap();\r\nconst internal = obj => {\r\n    if (!map.has(obj)) {\r\n        map.set(obj, {});\r\n    }\r\n    return map.get(obj);\r\n}\r\n\r\nclass Shape{\r\n    constructor(width, height) {\r\n      internal(this).width = width;\r\n      internal(this).height = height;\r\n    }\r\n    get area() {\r\n      return internal(this).width * internal(this).height;\r\n    }\r\n  }\r\n\r\nconst square = new Shape(10, 10);\r\n\r\nconsole.log(square);  // Shape {}  \r\nconsole.log(JSON.stringify(square)) // {}      \r\n    `\r\n  },\r\n  {\r\n    title: \"Symbol\",\r\n    text: `//Symbol 值作为属性名时，外部无法获取内部Symbol()生成的key才无法取到，但该属性仍是公开属性，不是私有属性\r\n//Symbol 作为属性名，该属性不会被遍历到；但是外部可以通过Object.getOwnPropertySymbols方法，可以获取指定对象的所有 Symbol 属性名\r\n\r\nconst widthSymbol = Symbol('width');\r\nconst heightSymbol = Symbol('height');\r\n\r\nclass Shape {\r\n    constructor(width, height) {\r\n        this[widthSymbol] = width;\r\n        this[heightSymbol] = height;\r\n    }\r\n    get area() {\r\n        returnthis[widthSymbol] * this[heightSymbol];\r\n    }\r\n}\r\n\r\nconst square = new Shape(10, 10);\r\n\r\nconsole.log(square);   // Shape { [Symbol(width)]: 10, [Symbol(height)]: 10 }\r\nconsole.log(JSON.stringify(square)) // {}`\r\n  },\r\n  {\r\n    title: \"闭包\",\r\n    text: `//外部访问不到内部的私有变量，但闭包需要手动连接原型链\r\n\r\nfunction Shape() {\r\n    // 私有变量集\r\n    const this$ = {};\r\n\r\n    class Shape {\r\n        constructor(width, height) {\r\n            this$.width = width;\r\n            this$.height = height;\r\n        }\r\n\r\n        get area() {\r\n            return this$.width * this$.height;\r\n        }\r\n    }\r\n\r\n    return Object.setPrototypeOf(new Shape(...arguments), this);   //手动连接 square instanceof Shape\r\n}\r\n\r\nconst square = new Shape(10, 10);   //这里new是为了保持类的使用形式\r\n\r\nconsole.log(square);  // Shape {}\r\nconsole.log(JSON.stringfy(square));  // {}\r\n    `\r\n  },\r\n  {\r\n    title: \"Proxy\",\r\n    text: `//用原型代理本质是在约定命名基础添加了外部访问的拦截器，丢出错误来终止外部访问的效果\r\n\r\nclass Shape {\r\n    constructor(width, height) {\r\n        this._width = width;\r\n        this._height = height;\r\n    }\r\n    get area() {\r\n        return this._width * this._height;\r\n    }\r\n}\r\n\r\nconst handler = {\r\n    get: function (target, key) {\r\n        if (key[0] === '_') {\r\n            throw new Error('Attempt to access private property');\r\n        } else if (key === 'toJSON') {\r\n            //JSON.stringfy会访问到私有属性报错，用内部新定义的方法覆盖默认的JSON.stringfy\r\n            const obj = {};\r\n            for (const key in target) {\r\n                if (key[0] !== '_') {           // 只复制公共属性\r\n                    obj[key] = target[key];\r\n                }\r\n            }\r\n            return () => obj;\r\n        }\r\n\r\n        return target[key];\r\n    },\r\n    set: function (target, key, value) {\r\n        if (key[0] === '_') {\r\n            throw new Error('Attempt to access private property');\r\n        }\r\n        target[key] = value;\r\n    },\r\n    //遍历仍会访问到私有属性，通过拦截器拦截对私有属性的遍历\r\n    getOwnPropertyDescriptor(target, key) {\r\n        const desc = Object.getOwnPropertyDescriptor(target, key);\r\n        if (key[0] === '_') {\r\n            desc.enumerable = false;\r\n        }\r\n        return desc;\r\n    }\r\n}\r\n\r\nconst square = new Proxy(new Shape(10, 10), handler);\r\n\r\nconsole.log(square);             // Shape { _width: 10, _height: 10 }\r\nconsole.log(square._width)       // Error: Attempt to access private property\r\nconsole.log(JSON.stringify(square))  // {}    \r\n    `\r\n  },{\r\n      title:'未来',\r\n      text:`//新提案\r\nclass Shape {\r\n\r\n    #height;\r\n    #width;\r\n    \r\n    constructor(width, height) {\r\n        this.#width = width;\r\n        this.#height = height;\r\n    }\r\n    \r\n    get area() {\r\n        return this.#width * this.#height;\r\n    }\r\n}\r\nconst square = new Shape(10, 10);\r\n\r\nconsole.log(square);                 // Shape {}\r\nconsole.log(square.#width);          // Error: Attempt to access private property\r\nconsole.log(JSON.stringfy(square))   // {}\r\n      `\r\n  }\r\n];\r\n\r\nexport default { javaScriptText };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/project/privateVariable/text/index.ts"],"sourceRoot":""}