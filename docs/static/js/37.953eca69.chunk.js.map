{"version":3,"sources":["project/jquery-3/text/index.ts"],"names":["Object","defineProperty","__webpack_exports__","value","exampleText","title","text","javaScriptText"],"mappings":"qDAAAA,OAAAC,eAAAC,EAAA,cAAAC,OAAA,IAmLeD,EAAA,SAAEE,cAjLTC,MAAO,0BACPC,KAAM,cAGND,MAAO,6BACPC,KAAM,aAGND,MAAO,4CACPC,KAAM,gBAGND,MAAO,kEACPC,KAAM,iCAoKgBC,iBA/J1BF,MAAO,qDACPC,KAAM,ilCAuBND,MAAO,iCACPC,KAAM","file":"static/js/37.953eca69.chunk.js","sourcesContent":["const exampleText = [\r\n    {\r\n        title: '1.dom选择器',\r\n        text: `$(\"#box\")`\r\n    },\r\n    {\r\n        title: '2.新建标签',\r\n        text: `$(\"<a>\")`\r\n    },\r\n    {\r\n        title: '3.原生dom转jquery对象',\r\n        text: `$(document)`\r\n    },\r\n    {\r\n        title: '4.传入函数相当于$(document).ready()',\r\n        text: `$(function(){onsole.log(1)})`\r\n    },\r\n]\r\n\r\nconst javaScriptText = [{\r\n    title: '一、document.onload与$(document).ready',\r\n    text: `// 页面渲染流程\r\n// 1.解析HTML生成DOM树（DOMContentLoaded）\r\n// 2.解析CSS生成CSS规则树\r\n// 3.遍历DOM树结合CSS规则树，生成渲染树\r\n// 4.遍历渲染树进行布局，计算节点位置大小\r\n// 5.渲染绘制\r\n\r\n// onload事件: 所有dom、样式、脚本、图片、flash加载完毕\r\n// DOMContentLoaded事件：当解析HTML完成生成DOM树 等效于 $(document).ready\r\n$(document).ready(function(){\r\n    console.log(1)\r\n})\r\n$(document).ready(function(){\r\n    console.log(2)\r\n})\r\n$(document).ready(function(){\r\n    console.log(3)\r\n})\r\n// 很不一样的一点是,onload绑定事件第二次会覆盖第一次\r\n// 而$(document).ready则会叠加(秘诀就是callback中的回调列表)\r\n\r\n`\r\n}, {\r\n    title: '二、Sizzle源码',\r\n    text: `\r\n(function (root) {\r\n    var jQuery = function (selector, context) {\r\n        // 错误实例化：会造成无限自我调用，形成死循环\r\n        // return  new jQuery();  \r\n        return new jQuery.prototype.init(selector, context)\r\n    }\r\n\r\n    // 为jQuery.prototype起别名jQuery.fn\r\n    jQuery.fn = jQuery.prototype = {\r\n        init: function (selector, context) {\r\n            context = context || document;\r\n            var match, elem, index = 0;\r\n            // $() $(undefined) $(null) $(false)\r\n            if (!selector) {\r\n                return this     // 返回jQuery,用来链式调用\r\n            }\r\n            // $('')\r\n            if (typeof selector === \"string\") {\r\n                // $('<div></div>')\r\n                if (selector.charAt(0) === \"<\" && selector.charAt(selector.length - 1) === \">\" && selector.length >= 3) {\r\n                    match = [selector]\r\n                }\r\n                // 创建DOM\r\n                if (match) {\r\n                    // 合并数组 object [context.createElement(parse[1])]\r\n                    jQuery.merge(this, jQuery.parseHTML(selector, context));\r\n\r\n                    // 查询DOM\r\n                } else {\r\n                    elem = document.querySelectorAll(selector);     // 类数组\r\n                    var elems = Array.prototype.slice.call(elem)    // 类数组转数组\r\n                    this.length = elems.length;\r\n                    // 将查询到的DOM节点存储到jQuery的实例对象\r\n                    for (; index < elems.length; index++) {\r\n                        this[index] = elems[index];\r\n                    }\r\n                    this.context = context;\r\n                    this.selector = selector;\r\n                }\r\n\r\n                // $(DOM) 如果传入的是一个对象，转换成jquery对象\r\n            } else if (selector.nodeType) {\r\n                this.context = this[0] = selector;\r\n                this.length = 1;\r\n                return this;\r\n            } else if (jQuery.isFunction(selector)) {\r\n                console.log(selector)\r\n                rootjQuery.ready(selector);  // 实例对象上的ready的方法\r\n            }\r\n        },\r\n\r\n    }\r\n\r\n    ready: function (fn) {\r\n        // 检测DOM是否加载完毕\r\n        document.addEventListener(\"DOMContentLoaded\", jQuery.ready, false)\r\n        // jQuery不同于上面,这里是定义在jQuery中的\r\n\r\n        // 在DOMContentLoaded后传入的函数,则直接执行传入的函数\r\n        if (jQuery.isready) {\r\n            fn.call(document)\r\n        } else {\r\n            // 在DOMContentLoaded前传入的函数,则推入readyList,在DOMContentLoaded时遍历list\r\n            jQuery.readylist.push(fn)\r\n        }\r\n    }\r\n\r\n    jQuery.fn.extend = jQuery.extend = function () { ... }\r\n\r\n    jQuery.extend({\r\n        // 为jQuery自身装填一些类型检测\r\n        isPlainObject: function (obj) {\r\n            return toString.call(obj) === \"[object Object]\";     //等同于 obj.toString()\r\n        },\r\n        isArray: function (obj) {\r\n            return toString.call(obj) === \"[object Array]\";\r\n        },\r\n        isFunction: function (fn) {\r\n            return toString.call(fn) === \"[object Function]\";\r\n        },\r\n        inArray: function (elem, arr) {\r\n            return arr === null ? -1 : [].indexOf.call(arr,elem)\r\n        },\r\n        // 合并数组 first:this second:[DOM节点]\r\n        merge: function (first, second) {\r\n            var l = second.length,  // 1\r\n                i = first.length, // 0 前面定义的\r\n                j = 0;\r\n\r\n            if (typeof l === 'number') {\r\n                for (; j < l; j++) {\r\n                    first[i++] = second[j]\r\n                }\r\n            } else {\r\n                while (second[j] !== undefined) {\r\n                    first[i++] = second[j++]\r\n                }\r\n            }\r\n\r\n            first.length = i;\r\n            return first;\r\n        },\r\n        // 提取标签\r\n        parseHTML: function (data, context) {\r\n            if (!data || typeof data !== \"string\") {\r\n                return null\r\n            }\r\n            // [\"<a>\",\"a\"] \r\n            var parse = rejectExp.exec(data);\r\n            console.log(parse)\r\n            return [context.createElement(parse[1])]\r\n        },\r\n        isready: false,\r\n        readylist: [],\r\n        // 该方法触发说明,上面的ready(实例对象的ready方法触发)\r\n        ready: function () {\r\n            jQuery.isready = true;\r\n            jQuery.readylist.forEach(function (callback) {\r\n                callback.call(document)\r\n            })\r\n            jQuery.readylist = null;\r\n        }\r\n    })\r\n    var rootjQuery = jQuery(document)\r\n\r\n    jQuery.fn.init.prototype = jQuery.fn \r\n\r\n    root.$ = root.jQuery = jQuery\r\n\r\n})(this);\r\n    `\r\n}];\r\n\r\nexport default { exampleText, javaScriptText };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/project/jquery-3/text/index.ts"],"sourceRoot":""}