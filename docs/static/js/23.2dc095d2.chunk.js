webpackJsonp([23],{1408:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.default={javaScriptText:"\nlet ticks$ = interval(SPEED);\nlet click$ = fromEvent(document, \"click\");\nlet keydown$ = fromEvent(document, \"keydown\");\n\nfunction createGame(fps$) {\n\n  // \u5c06\u952e\u76d8\u8f93\u5165\u8f6c\u6362\u4e3a\u65b9\u5411\u8f93\u51fa\n  let direcion$ = keydown$\n    .map(event => DIRECTIONS[event.keyCode])\n    .filter(direcion => !!direcion)\n    .scan(nextDirection)\n    .startWith(INITIAL_DIRECTION)\n    .distinctUntilChanged() //\u8fc7\u6ee4\u76f8\u540c\u7684\u503c\n\n\n  // length\u4f5c\u4e3a BehaviorSubject \u65e2\u662f\u89c2\u5bdf\u8005\u4e5f\u53ef\u4ee5\u662f\u88ab\u89c2\u5bdf\u5230\u7684\u72b6\u6001\uff0c\u88ab\u4f20\u64ad\u72b6\u6001 \n  let length$ = new BehaviorSubject(SNAKE_LENGTH);\n\n  let snakeLength$ = length$\n    .scan((step, snakeLength) => snakeLength + step)\n    .share()\n\n  let score$ = snakeLength$\n    .startWith(0)\n    .scan((score) => score + POINTS_PER_APPLE)\n\n\n  ticks$ = Observable.interval(SPEED);\n\n\n  // \u8fd9\u91cc\u6709\u4e24\u79cd\u5b9e\u73b0\u6a21\u5f0f\n  // \u8fd9\u79cd\u89e6\u53d1\u66f4\u65b0\u7684\u673a\u5236\u5408\u5e76\u4e86\u65f6\u95f4\u548c\u65b9\u5411\n  // \u7ed3\u679c\u5c31\u662f\u65f6\u95f4\u548c\u6309\u952e\u89e6\u53d1\u7684\u9891\u7387\u540c\u65f6\u4f1a\u66f4\u65b0\u86c7\u7684\u79fb\u52a8\n\n  // let snake$ = Observable.combineLatest(direcion$, ticks$, (direcion, tick) => direcion)\n  //   .withLatestFrom(snakeLength$, (direcion, snakeLength) => [direcion, snakeLength])\n  //   .scan(move, generateSnake())\n  //   .share()\n\n\n\n  // \u800c\u8fd9\u79cd\u65b9\u5f0f\u5219\u53ea\u628a\u86c7\u7684\u79fb\u52a8\u7ed1\u5b9a\u5230\u65f6\u95f4\u4e0a\uff0c\u6bcf\u4e2a\u65f6\u95f4\u70b9\u53d6\u6309\u952e\u7684\u6700\u540e\u4e00\u6b21\u65b9\u5411\n  // \u8fd9\u6837\u80fd\u8ba9\u86c7\u7684\u79fb\u52a8\u66f4\u52a0\u5e73\u5747\uff0c\u4f46\u662f\u4f1a\u6709\u4e00\u4e2aBUG\u5c31\u662f\u5f53\u4f60\u5728\u65f6\u95f4\u95f4\u9694\u4e4b\u4e2d\u5feb\u901f\u64cd\u4f5c\u4e86\u2191\u2192\u2193\uff08\u5047\u8bbe\u86c7\u539f\u6765\u7684\u79fb\u52a8\u65b9\u5411\u662f\u4e0b\uff09\uff0c\u8fd9\u6837\u8fd9\u4e2a\u65f6\u95f4\u70b9\u5c31\u4f1a\u68c0\u6d4b\u6210\u53d1\u751f\u78b0\u649e\u7ed3\u675f\u6e38\u620f\n\n  let snake$ = ticks$\n    .withLatestFrom(direcion$, snakeLength$, (tick, direcion, snakeLength) => [direcion, snakeLength])\n    .scan(move, generateSnake())\n    .share()\n\n  let apples$ = snake$\n    .scan(eat, generateApples())\n    .distinctUntilChanged()\n    .share();\n\n  let appleEaten$ = apples$\n    .skip(1)\n    .do(() => length$.next(POINTS_PER_APPLE))\n    .subscribe();\n\n  let scene$ = Observable.combineLatest(snake$, apples$, score$, (snake, apples, score) => ({ snake, apples, score }));\n\n  return fps$.pipe(withLatestFrom(scene$, (_, scene) => scene));\n}\n\nlet game$ = of('Start Game').pipe(\n  map(() => interval(1000 / FPS, animationFrame)),\n  switchMap(createGame),\n  takeWhile(scene => !isGameOver(scene))\n);\n\nconst startGame = () => {\n  let canvas = createCanvasElement();\n  let ctx = canvas.getContext('2d');\n  document.getElementById('container').innerHTML = ''\n  document.getElementById('container').appendChild(canvas);\n\n  game$.subscribe({\n    next: (scene) => renderScene(ctx, scene),\n    complete: () => {\n      renderGameOver(ctx);\n\n      click$.pipe(first()).subscribe(startGame);\n    }\n  })\n};\n"}}});
//# sourceMappingURL=23.2dc095d2.chunk.js.map