{"version":3,"sources":["project/serviceGenerator/text/index.ts"],"names":["Object","defineProperty","__webpack_exports__","value","javaScriptText","readMeText","exampleText"],"mappings":"qDAAAA,OAAAC,eAAAC,EAAA,cAAAC,OAAA,IAiJeD,EAAA,SAAEE,eAhIM,yvHAgIUC,WAhJjC,kWAgJ6CC,YA1I7C","file":"static/js/12.154aa868.chunk.js","sourcesContent":["const readMeText = \r\n`   1.根据接口对象自动封装出对应的服务层<br/>\r\n    2.加入和缓存、截流的可选功能<br/>\r\n    3.自动处理请求前的加载中动画与请求出错的提示动画\r\n`;\r\n\r\nconst exampleText = \r\n`import serviceGenerator from \"@utils/serviceGenerator\";\r\n\r\nexport default serviceGenerator(\r\n  {\r\n    fetchFansList: \"/r/FetchData/getAllDisCenterData\",\r\n    fetchOrderList: \"/r/FetchData/myOneFansDetail\"\r\n  }\r\n);\r\n`;\r\n\r\nconst javaScriptText = `\r\nimport qs from \"qs\";\r\nimport { Toast } from \"vant\";\r\n\r\nlet _cache = {};\r\n\r\nconst defaultConfig = {\r\n  type: \"post\",\r\n  isCache: false,\r\n  isThrottle: false,\r\n  throttleTime: 0,\r\n  axiosConfig: {}\r\n};\r\n\r\n// 添加请求拦截器\r\naxios.interceptors.request.use(\r\n  function(config) {\r\n    Toast.loading({ mask: false, duration: 0, message: \"加载中\" });\r\n    return config;\r\n  },\r\n  function(error) {\r\n    Toast.fail(\"请求出错\");\r\n    return Promise.reject({ msg: \"请求出错\" });\r\n  }\r\n);\r\n\r\n// 添加响应拦截器\r\naxios.interceptors.response.use(\r\n  function(response) {\r\n    Toast.clear();\r\n    if (response.data.code == 200) {\r\n      let url = response.config.url,\r\n        params = response.config.data || \"0\",\r\n        res = response.request.responseText;\r\n      _cache[url] ? null : (_cache[url] = []);\r\n      let existCacheIndex;\r\n      let _cacheFliter = _cache[url].filter((item, index) => {\r\n        item.params == params ? (existCacheIndex = index) : null;\r\n        return item.params == params;\r\n      });\r\n\r\n      _cacheFliter.length > 0\r\n        ? (_cache[url][existCacheIndex] = { params, res })\r\n        : _cache[url].push({ params, res });\r\n      return response.data;\r\n    } else {\r\n      Toast.fail(response.data.msg || \"服务器错误\");\r\n      return Promise.reject(response.data || { msg: \"服务器错误\" });\r\n    }\r\n  },\r\n  function(error) {\r\n    Toast.clear();\r\n    Toast.fail(\"响应出错\");\r\n    return Promise.reject({ msg: \"响应出错\" });\r\n  }\r\n);\r\n\r\n//截流处理\r\nconst throttleProxy = fn => {\r\n  let lastRequest = 0;\r\n  return new Proxy(fn, {\r\n    apply(target, context, args) {\r\n      let _config = Object.assign(defaultConfig, args[1] || {});\r\n      let rate = _config.throttleTime !== 0 ? _config.throttleTime : 0;\r\n      if (Date.now() - lastRequest >= rate) {\r\n        lastRequest = Date.now();\r\n        return fn(...args);\r\n      } else {\r\n        console.warn(\"本次请求被截流\");\r\n        return Promise.reject({ msg: \"本次请求被截流\" });\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n//生成部分\r\nlet serviceGenerator = (map = {}) => {\r\n  let ApiMap = {};\r\n  Object.entries(map).forEach(item => {\r\n    let key_map = item[0],\r\n      value_map = item[1];\r\n    let outPutApi = (params = {}, config = {}) => {\r\n\r\n      //合并默认参数\r\n      let _config = Object.assign(defaultConfig, config);\r\n\r\n      //_axiosConfig参数合并\r\n      let _axiosConfig = Object.assign(\r\n        {\r\n          method: \"post\",\r\n          url: value_map,\r\n          data: qs.stringify(params)\r\n        },\r\n        _config.axiosConfig || {},\r\n        { method: _config.type.toLowerCase() || \"post\" }\r\n      );\r\n      [\"put\", \"post\", \"patch\"].every(value => _axiosConfig.method !== value)\r\n        ? (_axiosConfig.params = params)\r\n        : \"\";\r\n      let _request = () => axios(_axiosConfig);\r\n\r\n      //处理缓存功能\r\n      if (_config.isCache === true) {\r\n        if (_cache[value_map]) {\r\n          let _cacheFliter = _cache[value_map].filter(\r\n            item => item.params == qs.stringify(params)\r\n          );\r\n          if (_cacheFliter.length > 0) {\r\n            _request = () => {\r\n              console.warn(\\`您本次请求接口：\\${value_map} 的数据来自缓存。\\`);\r\n              return Promise.resolve(JSON.parse(_cacheFliter[0].res));\r\n            };\r\n          }\r\n        }\r\n      }\r\n      return _request();\r\n    };\r\n\r\n    //截流代理\r\n    ApiMap[key_map] = throttleProxy(outPutApi);\r\n  });\r\n  return ApiMap;\r\n};\r\n\r\nexport default serviceGenerator;\r\n\r\n`;\r\n\r\nexport default { javaScriptText, readMeText, exampleText };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/project/serviceGenerator/text/index.ts"],"sourceRoot":""}