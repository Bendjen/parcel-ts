{"version":3,"sources":["project/reactiveProgramming/text/index.ts"],"names":["Object","defineProperty","__webpack_exports__","value","javaScriptText","title","text"],"mappings":"oDAAAA,OAAAC,eAAAC,EAAA,cAAAC,OAAA,IAiJeD,EAAA,SAAEE,iBA/IbC,MAAO,oCACPC,KAAM,4nEAyEND,MAAO,+BACPC,KAAM","file":"static/js/25.f6f546a0.chunk.js","sourcesContent":["const javaScriptText = [\r\n  {\r\n    title: \"LabeledSlider(子组件)\",\r\n    text: `import xs from \"xstream\";\r\nimport { run } from \"@cycle/run\";\r\nimport { div, input, h2, makeDOMDriver } from \"@cycle/dom\";\r\n\r\n//intent (events => actions)\r\nfunction intent(domSource) {\r\n  return {\r\n    changeValue$: domSource\r\n      .select(\".slider\")\r\n      .events(\"input\")\r\n      .map(ev => ev.target.value)\r\n  };\r\n}\r\n\r\n//model (actions => state)\r\nfunction model(actions, props$) {\r\n  const state$ = props$\r\n    .map(\r\n      props =>\r\n        //这部分才是真正含有变动数据的流\r\n        actions.changeValue$\r\n          .map(value => ({\r\n            label: props.label,\r\n            unit: props.unit,\r\n            min: props.min,\r\n            value: value,\r\n            max: props.max\r\n          }))\r\n          .startWith(props) //发出流\r\n    )\r\n    .flatten() //源流(props$)并非要输出的流(含changeValue$的一个完整的state$)，要输出的流是由源流内部以另一个流发出的(changeValue$),由flatten()整合\r\n    .remember(); //重新将流作为一个输出流进行输出，相当于触发了.startWith()。本身的流并非一个输出流（不含有of\\creat\\combine之类的创建）\r\n\r\n  return state$;\r\n}\r\n\r\n//view (state => dom)\r\nfunction view(state$) {\r\n  return state$.map(state =>\r\n    div([\r\n      \\`\\${state.label}: \\${state.value} \\${state.unit}\\`,\r\n      input(\".slider\", {\r\n        attrs: {\r\n          type: \"range\",\r\n          min: state.min,\r\n          max: state.max,\r\n          value: state.value\r\n        }\r\n      })\r\n    ])\r\n  );\r\n}\r\n\r\n//组装\r\nfunction LabeledSlider(sources) {\r\n  //闭环\r\n  const actions = intent(sources.DOM);\r\n  const state$ = model(actions, sources.props);\r\n  const vdom$ = view(state$);\r\n\r\n  //输出副作用\r\n  const sinks = {\r\n    DOM: vdom$,\r\n    value: state$.map(state => state.value)\r\n  };\r\n\r\n  return sinks;\r\n}\r\n\r\nexport default LabeledSlider;\r\n  `\r\n  },\r\n  {\r\n    title: \"index.js(父组件)\",\r\n    text: `import xs from \"xstream\";\r\n// import Rx from \"rxjs\";\r\nimport { run } from \"@cycle/run\";\r\nimport { div, h2, makeDOMDriver } from \"@cycle/dom\";\r\nimport isolate from \"@cycle/isolate\";\r\n\r\nimport LabeledSlider from \"./LabeledSlider\";\r\n\r\nfunction main(sources) {\r\n  //实例化组件\r\n  const weightSlider = isolate(LabeledSlider)({\r\n    DOM: sources.DOM,\r\n    props: xs.of({\r\n      label: \"Weight\",\r\n      unit: \"kg\",\r\n      min: 40,\r\n      value: 70,\r\n      max: 150\r\n    })\r\n  });\r\n  const heightSlider = isolate(LabeledSlider)({\r\n    DOM: sources.DOM,\r\n    props: xs.of({\r\n      label: \"Height\",\r\n      unit: \"cm\",\r\n      min: 140,\r\n      value: 170,\r\n      max: 210\r\n    })\r\n  });\r\n\r\n  //获取组件的流与dom\r\n  const { value: weightValue$, DOM: weightVDom$ } = weightSlider;\r\n  const { value: heightValue$, DOM: heightVDom$ } = heightSlider;\r\n\r\n  //计算bmi\r\n  const bmi$ = xs\r\n    .combine(weightValue$, heightValue$)\r\n    .map(([weight, height]) => {\r\n      const heightMeters = height * 0.01;\r\n      const bmi = Math.round(weight / (heightMeters * heightMeters));\r\n      return bmi;\r\n    })\r\n    .remember();\r\n\r\n  //计算父组件vdom\r\n  const vdom$ = xs\r\n    .combine(bmi$, weightVDom$, heightVDom$)\r\n    .map(([bmi, weightVDom, heightVDom]) =>\r\n      div([\r\n        weightVDom,\r\n        heightVDom,\r\n        h2({ style: { marginTop: \"20px\" } }, \\`BMI is   \\${bmi}\\`)\r\n      ])\r\n    );\r\n\r\n  return {\r\n    DOM: vdom$\r\n  };\r\n}\r\n\r\nrun(main, {\r\n  DOM: makeDOMDriver(\"#app\")\r\n});\r\n    `\r\n  }\r\n];\r\n\r\nexport default { javaScriptText };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/project/reactiveProgramming/text/index.ts"],"sourceRoot":""}