{"version":3,"sources":["project/underscore-1/text/index.ts"],"names":["Object","defineProperty","__webpack_exports__","value","exampleText","title","text","javaScriptText"],"mappings":"qDAAAA,OAAAC,eAAAC,EAAA,cAAAC,OAAA,IA2HeD,EAAA,SAAEE,cAzHTC,MAAO,sDACPC,KAAM,yDAIND,MAAO,mFACPC,KAAM,6DAIND,MAAO,+CACPC,KAAM,6EA8GeC,eAzGN","file":"static/js/21.37effe56.chunk.js","sourcesContent":["const exampleText = [\r\n    {\r\n        title: '1.调用_下的静态方法',\r\n        text: `_.unique([1, 2, 3, 4, 5, 4, 5, 6])\r\n// [1,2,3,4,5,6]`\r\n    },\r\n    {\r\n        title: '2.实例化后调用原型链上的方法',\r\n        text: `_([1, 2, 3, 4, 5, 4, 5, 6]).unique()\r\n// [1,2,3,4,5,6]  `\r\n    },\r\n    {\r\n        title: '3.实例化链式调用',\r\n        text: `_([1, 2, 3, 4, 5, 4, 5, 6]).chain().unique().value()\r\n// [1,2,3,4,5,6]  `\r\n    }\r\n]\r\n\r\nconst javaScriptText = `\r\n(function(root) {\r\n\tvar push = Array.prototype.push;\r\n\t\r\n\tvar _ = function(obj) {\r\n\t\t// 如果传入的参数已经是 _ 的实例则直接返回该实例\r\n\t\tif (obj instanceof _) {\r\n\t\t\treturn obj;\r\n\t\t}\r\n\r\n\t\t// 如果传入的参数不是 _ 的实例则生成一个_wrapped值为传入值的实例\r\n\t\tif (!(this instanceof _)) {\r\n\t\t\treturn new _(obj);\r\n\t\t}\r\n\t\tthis._wrapped = obj;\r\n\t}\r\n\r\n\t_.unique = function(arr, callback) {\r\n\t\tvar ret = [];\r\n\t\tvar target, i = 0;\r\n\t\tfor (; i < arr.length; i++) {\r\n\t\t\tvar target = callback ? callback(arr[i]) : arr[i];\r\n\t\t\tif (ret.indexOf(target) === -1) {\r\n\t\t\t\tret.push(target);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn ret;\r\n\t}\r\n\r\n\t//开启链接式的调用\r\n\t_.chain = function(obj) {\r\n\t\tvar instance = _(obj);\r\n\t\tinstance._chain = true;\r\n\t\treturn instance;\r\n\t}\r\n\r\n\t//辅助函数    obj   数据结果\r\n\tvar result = function(instance, obj) {\r\n\t\treturn instance._chain ? _(obj).chain() : obj;\r\n\t}\r\n\r\n\t_.prototype.value = function() {\r\n\t\treturn this._wrapped;\r\n\t}\r\n\r\n\t_.functions = function(obj) {\r\n\t\tvar result = [];\r\n\t\tvar key;\r\n\t\tfor (key in obj) {\r\n\t\t\tresult.push(key);\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t_.map = function(args,callback) {\r\n      return args;\r\n\t}\r\n\r\n\t//类型检测\r\n\t_.isArray = function(array) {\r\n\t\treturn toString.call(array) === \"[object Array]\";\r\n\t}\r\n\r\n\t_.each = function(target, callback) {\r\n\t\t// console.log(target)\r\n\t\tvar key, i = 0;\r\n\t\tif (_.isArray(target)) {\r\n\t\t\tvar length = target.length;\r\n\t\t\tfor (; i < length; i++) {\r\n\t\t\t\tcallback.call(target, target[i], i);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (key in target) {\r\n\t\t\t\tcallback.call(target, key, target[key]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//mixin：为_的实例对象添加方法\r\n\t_.mixin = function(obj) {\r\n\t\t// _.functions(obj) : 返回传入obj的key形成的数组\r\n\t\t_.each(_.functions(obj), function(name) {\r\n\t\t\tvar func = obj[name];\r\n\r\n\t\t\t// 为_.的实例添加同名方法，可以链式调用，且_wrapped作为第一个参数\r\n\t\t\t_.prototype[name] = function() {\r\n\t\t\t\tvar args = [this._wrapped];\r\n\t\t\t\tpush.apply(args, arguments);\r\n\t\t\t\t// result : 如果实例对象的_chain属性为true，则返回_wrapped为数据结果的实例对象\r\n\t\t\t\t//          如果实例对象的_chain属性为false，则直接返回数据结果\r\n\t\t\t\treturn result(this, func.apply(this, args));\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t// 为_的原型赋予定义在_的方法，并使用wrapped作为第一个参数\r\n\t_.mixin(_);\r\n\troot._ = _;\r\n})(this);\r\n\r\n\r\n`;\r\n\r\nexport default { exampleText,javaScriptText };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/project/underscore-1/text/index.ts"],"sourceRoot":""}